/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mapview;

import adminmodule.Location;
import adminmodule.Map;
import java.awt.BorderLayout;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.Timer;
import jdbc.JDBC;

/**
 *
 * @author GaoYifei
 */
public class SecRightSideBar extends javax.swing.JPanel implements MouseListener, ActionListener {

    private JDBC db = JDBC.getInstance();
    private Map map = new Map();
    private ArrayList<Location> locationList = new ArrayList<Location>();
    private ArrayList<JLabel> labelList = new ArrayList<JLabel>();
    private ArrayList<JLabel> pinList = new ArrayList<JLabel>();
    private Boolean click = false;
    private Boolean isCampus = true;
    public MainPanel mainPanel;
    public Timer timer;
    
    private int index = 0;
    int temp = -1;

    public MapModel mapModel = null;

    /**
     * Creates new form SecRightSideBar
     */
    public SecRightSideBar() {
        initComponents();
        
        timer = new Timer(100, this);
        timer.setInitialDelay(200);

    }
    
   
    
    public void changeBackGround(){
        if(isCampus){
            this.setBackground(Color.red);
            this.repaint();
        }
        else{
            this.setBackground(Color.WHITE);
            this.repaint();
        }
    }
    
    public void ShowLocationName(String category) throws SQLException {
        this.removeAll();

         map = mainPanel.getMap();
     
       
//        locationList = info.locations;
//        for(Map temp: mapModel.getMapList()){
//            if(temp.description.equals(m.description)){
//                locationList.addAll(temp.locList);
//            }
//        }
      //  locationList = locationList.addAll(locationList)
         
        locationList = map.locList;
        labelList.clear();

        for (Location l : locationList) {
            if (l.category.toString().equals(category)) {
                        JLabel label = new JLabel();
                        label.setText(l.name);

                        labelList.add(label);
            }
     

        }
        int y = 0;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(170, 800));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 169, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
//    @Override
//    public void paintComponent(Graphics g){
//        super.paintComponent(g);
//        this.setBackground(Color.red);
//    }
    @Override
    public void mouseClicked(MouseEvent e) {
        
        int n = 0;
        JLabel pinLabel = new JLabel();
        // set all label to null
        for (JLabel j : pinList) {
            // j.setIcon(null);
            j.setIcon(null);
        }


        for (n = 0; n < labelList.size(); n++) {
            if (e.getSource().equals(labelList.get(n))) {
                
                labelList.get(n).setForeground(Color.black);
                mainPanel.showSinglePin(labelList.get(n).getText());
                temp = n;
            }
            else{
                labelList.get(n).setForeground(Color.white);

                this.repaint();
            
            }

        }
        

        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {

        int n = 0;
        for (n = 0; n < labelList.size(); n++) {
            if (e.getSource().equals(labelList.get(n))) {               
                labelList.get(n).setForeground(Color.black);
                this.repaint();
            }
        }
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {
        int m;
        for (m = 0; m < labelList.size(); m++) {

                if (m != temp) {

                    labelList.get(m).setForeground(Color.white);
                    this.repaint();
                }
                else {
                    labelList.get(m).setForeground(Color.black);
                    this.repaint();
                }


        }
 

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (e.getSource() == timer && !labelList.isEmpty() ) {
          //  System.out.print("timer !");
            int y = index * 30; // hieght change 

            JLabel label = labelList.get(index);

            Font font = new Font("Roboto", Font.BOLD, 16);
            label.setFont(font);
            label.setBounds(25, 90 + y, 160, 30);
            label.setForeground(Color.white);
            label.addMouseListener(this);

            this.add(label);

            BorderLayout layout;
            layout = new BorderLayout();
            this.setLayout(layout);

            this.validate();
            this.repaint();

            index++;
            if (index == labelList.size()) {
                this.timer.stop();
                index = 0;
            }

        }

    }

    /**
     * @return the isCampus
     */
    public Boolean getIsCampus() {
        return isCampus;
    }

    /**
     * @param isCampus the isCampus to set
     */
    public void setIsCampus(Boolean isCampus) {
        this.isCampus = isCampus;
    }
}
